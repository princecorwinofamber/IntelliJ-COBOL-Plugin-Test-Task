/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package org.intellij.sdk.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.intellij.sdk.language.psi.CobolTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Cobol.flex</tt>
 */
class CobolLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IDENTIFICATION_DIVISION = 2;
  public static final int DATA_DIVISION = 4;
  public static final int PROCEDURE_DIVISION = 6;
  public static final int REQUIRE_DIVISION = 8;
  public static final int WAIT_IDENTIFICATION_VALUE = 10;
  public static final int WS_SECTION = 12;
  public static final int WAIT_VARIABLE_NUMBER = 14;
  public static final int WAIT_VARIABLE_NAME = 16;
  public static final int WAIT_PIC = 18;
  public static final int WAIT_DATA_TYPE = 20;
  public static final int WAIT_VALUE_KEYWORD = 22;
  public static final int WAIT_VALUE = 24;
  public static final int VARIABLE_DECLARATION_WAIT_DOT = 26;
  public static final int PARAGRAPH = 28;
  public static final int STATEMENT = 30;
  public static final int PERFROM_WAIT_PARAGRAPH = 32;
  public static final int PERFROM_WAIT_VARYING = 34;
  public static final int PERFROM_WAIT_VARIABLE_TO_VARY = 36;
  public static final int PERFROM_WAIT_FROM = 38;
  public static final int PERFROM_WAIT_FROM_VALUE = 40;
  public static final int PERFROM_WAIT_BY = 42;
  public static final int PERFROM_WAIT_BY_VALUE = 44;
  public static final int PERFROM_WAIT_UNTIL = 46;
  public static final int PERFROM_WAIT_UNTIL_VALUE = 48;
  public static final int WAIT_COMPARISON_SIGN = 50;
  public static final int WAIT_COMPARISON_SECOND = 52;
  public static final int SENTENCE = 54;
  public static final int DISPLAY_WAIT = 56;
  public static final int STRING_LITERAL = 58;
  public static final int WAIT_PAREN_OPEN = 60;
  public static final int WAIT_PAREN_CLOSE = 62;
  public static final int WAIT_TYPE_SIZE = 64;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 
    32, 32
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [10, 6, 5]
   * Total runtime size is 4160 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>11]<<6)|((ch>>5)&0x3f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 544 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\15\5\1\7\1\10\11\5\1\11\1\12\1\5\1\13\1\14\11"+
    "\5\1\15\14\5\1\16\2\5\1\17\u01e2\5");

  /* The ZZ_CMAP_Y table has 1024 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\55\3\1\6\3\3\1\7\6\3\1\6\14\3\1\10\3\3\1\10\3\3\1"+
    "\10\3\3\1\10\3\3\1\10\3\3\1\10\3\3\1\10\3\3\1\10\3\3\1\10\3\3\1\10\2\3\1\7"+
    "\3\3\1\7\2\3\1\6\10\3\1\6\1\3\1\7\57\3\1\5\12\3\1\6\1\7\11\3\1\10\3\3\1\7"+
    "\5\3\1\11\5\3\1\7\2\3\1\7\4\3\1\11\35\3\1\12\1\13\1\14\175\3\1\5\160\3\1\6"+
    "\24\3\1\7\1\3\1\6\5\3\2\7\2\3\1\7\14\3\1\7\130\3\1\7\54\3\1\6\35\3\1\10\3"+
    "\3\1\7\1\3\1\15\4\3\1\7\10\3\1\7\12\3\1\7\3\3\1\7\13\3\1\7\3\3\1\6\2\3\1\7"+
    "\15\3\1\6\32\3\1\7\60\3\1\6\6\3\1\7\143\3\1\16\1\17\12\3\1\7\65\3");

  /* The ZZ_CMAP_A table has 512 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\1\24\1\2\1\1\22\0\1\14\6\0\1\41\1\32\1\33\3\0\1\30\1\17\1\0"+
    "\12\23\2\0\3\40\2\0\1\12\1\37\1\11\1\4\1\5\1\10\1\27\1\31\1\3\1\31\1\26\1"+
    "\34\1\35\1\6\1\13\1\20\1\31\1\21\1\16\1\7\1\22\1\15\1\25\1\31\1\36\1\31\52"+
    "\0\1\24\32\0\1\24\37\0\12\23\46\0\12\23\14\0\12\23\20\0\12\23\6\0\12\23\6"+
    "\0\13\24\35\0\2\24\5\0\1\24\57\0\1\24\26\0\12\23\16\0\62\23");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\41\0\1\1\1\2\1\1\1\3\5\1\1\3\13\1"+
    "\1\2\1\3\2\1\1\4\1\1\1\5\1\1\1\6"+
    "\1\7\3\1\1\10\1\11\1\12\1\1\1\13\1\1"+
    "\1\14\1\1\1\15\1\1\1\16\1\17\1\20\2\1"+
    "\1\21\1\1\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\0\1\32\3\0\1\33\3\0\1\33"+
    "\3\0\1\34\2\0\1\33\1\0\1\35\1\36\1\37"+
    "\7\0\1\40\16\0\1\41\31\0\1\42\14\0\1\43"+
    "\4\0\1\44\30\0\1\45\1\0\1\46\1\47\1\45"+
    "\1\46\10\0\1\50\41\0\1\51\21\0\1\52\11\0"+
    "\1\53\1\54";

  private static int [] zzUnpackAction() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\252\0\314\0\356"+
    "\0\u0110\0\u0132\0\u0154\0\u0176\0\u0198\0\u01ba\0\u01dc\0\u01fe"+
    "\0\u0220\0\u0242\0\u0264\0\u0286\0\u02a8\0\u02ca\0\u02ec\0\u030e"+
    "\0\u0330\0\u0352\0\u0374\0\u0396\0\u03b8\0\u03da\0\u03fc\0\u041e"+
    "\0\u0440\0\u0462\0\u0484\0\u04a6\0\u0462\0\u04c8\0\u04ea\0\u050c"+
    "\0\u052e\0\u0550\0\u04c8\0\u0572\0\u0594\0\u05b6\0\u05d8\0\u05fa"+
    "\0\u061c\0\u063e\0\u0660\0\u0682\0\u06a4\0\u06c6\0\u06e8\0\u06c6"+
    "\0\u070a\0\u072c\0\u074e\0\u0770\0\u0462\0\u0792\0\u07b4\0\u0462"+
    "\0\u07d6\0\u07f8\0\u081a\0\u083c\0\u085e\0\u0880\0\u08a2\0\u08c4"+
    "\0\u08e6\0\u0908\0\u092a\0\u094c\0\u096e\0\u0990\0\u0462\0\u09b2"+
    "\0\u09d4\0\u09f6\0\u0462\0\u0a18\0\u0a3a\0\u0a5c\0\u0462\0\u0462"+
    "\0\u0462\0\u0462\0\u0a7e\0\u0462\0\u04c8\0\u0462\0\u0aa0\0\u0ac2"+
    "\0\u0ae4\0\u04c8\0\u0b06\0\u0b28\0\u0b4a\0\u0462\0\u0b6c\0\u0660"+
    "\0\u0b8e\0\u0462\0\u0bb0\0\u0bd2\0\u0660\0\u06c6\0\u0462\0\u0462"+
    "\0\u0462\0\u0bf4\0\u0c16\0\u0c38\0\u0c5a\0\u0c7c\0\u0c9e\0\u0cc0"+
    "\0\u0462\0\u0ce2\0\u0d04\0\u0d26\0\u0d48\0\u0d6a\0\u0d8c\0\u0dae"+
    "\0\u0dd0\0\u0df2\0\u0e14\0\u0e36\0\u0e58\0\u0e7a\0\u0e9c\0\u0462"+
    "\0\u0ebe\0\u0ee0\0\u0f02\0\u0f24\0\u0f46\0\u0f68\0\u0f8a\0\u0fac"+
    "\0\u0fce\0\u0ff0\0\u1012\0\u1034\0\u1056\0\u1078\0\u109a\0\u10bc"+
    "\0\u10de\0\u1100\0\u1122\0\u1144\0\u1166\0\u1188\0\u11aa\0\u11cc"+
    "\0\u11ee\0\u0462\0\u1210\0\u1232\0\u1254\0\u1276\0\u1298\0\u12ba"+
    "\0\u12dc\0\u12fe\0\u1320\0\u1342\0\u1364\0\u1386\0\u0462\0\u13a8"+
    "\0\u13ca\0\u13ec\0\u140e\0\u0462\0\u1430\0\u1452\0\u1474\0\u1496"+
    "\0\u14b8\0\u14da\0\u14fc\0\u151e\0\u1540\0\u1562\0\u1584\0\u15a6"+
    "\0\u15c8\0\u15ea\0\u160c\0\u162e\0\u1650\0\u1672\0\u1694\0\u16b6"+
    "\0\u16d8\0\u16fa\0\u171c\0\u173e\0\u0660\0\u1760\0\u0660\0\u0462"+
    "\0\u0462\0\u0462\0\u1782\0\u17a4\0\u17c6\0\u17e8\0\u180a\0\u182c"+
    "\0\u184e\0\u1870\0\u0462\0\u1892\0\u18b4\0\u18d6\0\u18f8\0\u191a"+
    "\0\u193c\0\u195e\0\u1980\0\u19a2\0\u19c4\0\u19e6\0\u1a08\0\u1a2a"+
    "\0\u1a4c\0\u1a6e\0\u1a90\0\u1ab2\0\u1ad4\0\u1af6\0\u1b18\0\u1b3a"+
    "\0\u1b5c\0\u1b7e\0\u1ba0\0\u1bc2\0\u1be4\0\u1c06\0\u1c28\0\u1c4a"+
    "\0\u1c6c\0\u1c8e\0\u1cb0\0\u1cd2\0\u0462\0\u1cf4\0\u1d16\0\u1d38"+
    "\0\u1d5a\0\u1d7c\0\u1d9e\0\u1dc0\0\u1de2\0\u1e04\0\u1e26\0\u1e48"+
    "\0\u1e6a\0\u1e8c\0\u1eae\0\u1ed0\0\u1ef2\0\u1f14\0\u0462\0\u1f36"+
    "\0\u1f58\0\u1f7a\0\u1f9c\0\u1fbe\0\u1fe0\0\u2002\0\u2024\0\u2046"+
    "\0\u0462\0\u0462";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\42\2\43\11\42\1\43\6\42\1\44\15\42\1\45"+
    "\1\46\2\43\1\47\1\50\7\46\1\43\2\46\1\42"+
    "\1\51\2\46\1\52\1\42\14\46\1\53\1\42\2\43"+
    "\1\54\1\55\7\42\1\43\3\42\1\56\2\42\1\57"+
    "\1\42\1\60\13\42\1\45\1\42\2\43\1\61\1\62"+
    "\7\63\1\43\2\63\1\42\1\64\2\63\1\65\1\42"+
    "\5\63\2\42\4\63\1\42\1\45\1\42\2\43\1\54"+
    "\1\55\7\42\1\43\3\42\1\56\20\42\1\45\1\66"+
    "\2\67\11\66\1\67\2\66\1\42\21\66\1\70\1\42"+
    "\2\43\11\42\1\43\6\42\1\71\15\42\1\45\1\42"+
    "\2\43\1\54\1\55\7\42\1\43\3\42\1\56\2\42"+
    "\1\72\15\42\1\45\1\42\2\43\11\73\1\43\2\73"+
    "\1\42\4\73\1\42\5\73\2\42\4\73\1\42\1\45"+
    "\1\42\2\43\11\42\1\43\3\42\1\74\20\42\1\45"+
    "\1\75\2\43\11\75\1\43\7\75\1\42\15\75\1\42"+
    "\2\43\11\42\1\43\1\76\23\42\1\45\1\42\2\43"+
    "\11\42\1\43\6\42\1\77\15\42\1\45\1\42\2\43"+
    "\11\42\1\43\2\42\1\100\21\42\1\45\1\42\2\43"+
    "\1\61\1\101\7\63\1\43\1\63\1\102\1\42\1\103"+
    "\2\63\1\65\1\42\5\63\2\42\4\63\1\42\1\45"+
    "\1\42\1\104\1\43\11\105\1\43\2\105\1\42\3\105"+
    "\2\42\5\105\2\42\4\105\1\42\1\45\1\42\2\43"+
    "\11\106\1\43\2\106\1\42\4\106\1\42\5\106\2\42"+
    "\4\106\1\42\1\45\1\42\2\43\11\42\1\43\1\107"+
    "\23\42\1\45\1\42\2\43\11\110\1\43\2\110\1\42"+
    "\4\110\1\42\5\110\2\42\4\110\1\42\1\45\1\42"+
    "\2\43\5\42\1\111\3\42\1\43\24\42\1\45\1\42"+
    "\2\43\11\112\1\43\2\112\1\42\4\112\1\42\5\112"+
    "\2\42\4\112\1\42\1\45\1\42\2\43\11\42\1\43"+
    "\22\42\1\113\1\42\1\45\1\42\2\43\11\114\1\43"+
    "\2\114\1\42\4\114\1\42\5\114\2\42\4\114\1\42"+
    "\1\45\1\42\2\43\11\42\1\43\5\42\1\115\16\42"+
    "\1\45\1\42\2\43\11\116\1\43\2\116\1\42\4\116"+
    "\1\42\5\116\2\42\4\116\1\42\1\45\1\42\2\43"+
    "\11\42\1\43\23\42\1\117\1\45\1\42\2\43\11\120"+
    "\1\43\2\120\1\42\4\120\1\42\5\120\2\42\4\120"+
    "\1\42\1\45\1\42\2\43\1\42\1\121\7\42\1\43"+
    "\1\42\1\122\1\123\1\124\2\42\1\57\15\42\1\45"+
    "\1\42\1\125\1\43\11\126\1\43\2\126\1\123\4\126"+
    "\1\42\5\126\2\42\4\126\1\42\1\45\1\127\1\42"+
    "\37\127\1\130\1\42\2\43\11\42\1\43\15\42\1\131"+
    "\6\42\1\45\1\42\2\43\11\42\1\43\16\42\1\132"+
    "\5\42\1\45\1\42\2\43\11\42\1\43\6\42\1\133"+
    "\15\42\1\45\43\0\2\43\11\0\1\43\50\0\1\134"+
    "\16\0\1\135\2\0\11\135\1\0\2\135\1\136\4\135"+
    "\1\0\16\135\2\0\1\135\1\137\7\135\1\0\2\135"+
    "\1\136\4\135\1\0\16\135\2\0\7\135\1\140\1\135"+
    "\1\0\2\135\1\136\4\135\1\0\16\135\2\0\11\135"+
    "\1\0\2\135\1\136\1\135\1\141\2\135\1\0\16\135"+
    "\2\0\11\135\1\0\2\135\1\136\3\135\1\142\1\0"+
    "\15\135\4\0\1\143\47\0\1\144\50\0\1\145\43\0"+
    "\1\146\31\0\1\147\31\0\1\150\1\151\7\150\1\0"+
    "\2\150\1\152\4\150\1\0\5\150\2\0\4\150\5\0"+
    "\7\150\1\153\1\150\1\0\2\150\1\152\4\150\1\0"+
    "\5\150\2\0\4\150\5\0\11\150\1\0\2\150\1\152"+
    "\4\150\1\0\5\150\2\0\4\150\5\0\11\150\1\0"+
    "\2\150\1\152\1\150\1\154\2\150\1\0\5\150\2\0"+
    "\4\150\5\0\11\150\1\0\2\150\1\152\3\150\1\155"+
    "\1\0\5\150\2\0\4\150\2\0\17\156\1\157\23\156"+
    "\2\67\11\156\1\67\2\156\1\157\22\156\23\0\1\160"+
    "\41\0\1\161\21\0\11\73\1\0\2\73\1\0\4\73"+
    "\1\0\5\73\2\0\4\73\5\0\1\162\50\0\1\163"+
    "\52\0\1\77\21\0\1\164\6\150\1\153\1\150\1\0"+
    "\2\150\1\152\4\150\1\0\5\150\2\0\4\150\5\0"+
    "\4\150\1\165\4\150\1\0\2\150\1\152\4\150\1\0"+
    "\5\150\2\0\4\150\5\0\2\150\1\166\6\150\1\0"+
    "\2\150\1\152\1\150\1\154\2\150\1\0\5\150\2\0"+
    "\4\150\3\0\1\104\1\43\11\0\1\43\30\0\11\105"+
    "\1\0\2\105\1\0\3\105\2\0\5\105\2\0\4\105"+
    "\5\0\11\106\1\0\2\106\1\0\4\106\1\0\5\106"+
    "\2\0\4\106\14\0\1\167\32\0\11\110\1\0\2\110"+
    "\1\0\4\110\1\0\5\110\2\0\4\110\23\0\1\170"+
    "\23\0\11\112\1\0\2\112\1\0\4\112\1\0\5\112"+
    "\2\0\4\112\40\0\1\171\6\0\11\114\1\0\2\114"+
    "\1\0\4\114\1\0\5\114\2\0\4\114\10\0\1\172"+
    "\36\0\11\116\1\0\2\116\1\0\4\116\1\0\5\116"+
    "\2\0\4\116\5\0\11\120\1\0\2\120\1\0\4\120"+
    "\1\0\5\120\2\0\4\120\5\0\1\173\45\0\1\174"+
    "\37\0\1\175\35\0\1\125\1\43\11\0\1\43\30\0"+
    "\11\126\1\0\2\126\1\0\4\126\1\0\5\126\2\0"+
    "\4\126\25\0\1\133\16\0\1\135\2\0\2\135\1\176"+
    "\6\135\1\0\2\135\1\136\4\135\1\0\16\135\2\0"+
    "\4\135\1\177\4\135\1\0\2\135\1\136\4\135\1\0"+
    "\16\135\2\0\10\135\1\200\1\0\2\135\1\136\4\135"+
    "\1\0\15\135\5\0\1\201\43\0\1\202\45\0\1\203"+
    "\47\0\1\204\23\0\2\150\1\205\6\150\1\0\2\150"+
    "\1\152\4\150\1\0\5\150\2\0\4\150\5\0\4\150"+
    "\1\206\4\150\1\0\2\150\1\152\4\150\1\0\5\150"+
    "\2\0\4\150\5\0\10\150\1\207\1\0\2\150\1\152"+
    "\4\150\1\0\5\150\2\0\4\150\13\0\1\210\64\0"+
    "\1\211\10\0\11\150\1\0\1\150\1\212\1\152\4\150"+
    "\1\0\5\150\2\0\4\150\5\0\10\150\1\213\1\0"+
    "\2\150\1\152\4\150\1\0\5\150\2\0\4\150\5\0"+
    "\11\150\1\0\2\150\1\152\1\150\1\214\2\150\1\0"+
    "\5\150\2\0\4\150\23\0\1\215\33\0\1\216\35\0"+
    "\1\217\50\0\1\220\36\0\1\221\47\0\1\222\20\0"+
    "\1\135\2\0\3\135\1\223\5\135\1\0\2\135\1\136"+
    "\4\135\1\0\16\135\2\0\7\135\1\224\1\135\1\0"+
    "\2\135\1\136\4\135\1\0\16\135\2\0\6\135\1\225"+
    "\2\135\1\0\2\135\1\136\4\135\1\0\15\135\6\0"+
    "\1\226\45\0\1\227\40\0\1\230\56\0\1\231\16\0"+
    "\3\150\1\232\5\150\1\0\2\150\1\152\4\150\1\0"+
    "\5\150\2\0\4\150\5\0\7\150\1\233\1\150\1\0"+
    "\2\150\1\152\4\150\1\0\5\150\2\0\4\150\5\0"+
    "\6\150\1\234\2\150\1\0\2\150\1\152\4\150\1\0"+
    "\5\150\2\0\4\150\24\0\1\235\22\0\11\150\1\0"+
    "\2\150\1\152\1\236\3\150\1\0\5\150\2\0\4\150"+
    "\5\0\11\150\1\0\2\150\1\152\1\237\3\150\1\0"+
    "\5\150\2\0\4\150\5\0\5\150\1\240\3\150\1\0"+
    "\2\150\1\152\4\150\1\0\5\150\2\0\4\150\40\0"+
    "\1\241\40\0\1\242\7\0\1\243\56\0\1\244\41\0"+
    "\1\245\31\0\1\246\31\0\1\135\2\0\4\135\1\247"+
    "\4\135\1\0\2\135\1\136\4\135\1\0\16\135\2\0"+
    "\11\135\1\250\2\135\1\136\4\135\1\0\16\135\2\0"+
    "\2\135\1\251\6\135\1\0\2\135\1\136\4\135\1\0"+
    "\15\135\7\0\1\252\46\0\1\250\32\0\1\253\37\0"+
    "\1\254\41\0\4\150\1\255\4\150\1\0\2\150\1\152"+
    "\4\150\1\0\5\150\2\0\4\150\5\0\11\150\1\250"+
    "\2\150\1\152\4\150\1\0\5\150\2\0\4\150\5\0"+
    "\2\150\1\256\6\150\1\0\2\150\1\152\4\150\1\0"+
    "\5\150\2\0\4\150\7\0\1\257\37\0\11\150\1\0"+
    "\2\150\1\152\4\150\1\0\5\150\2\0\1\260\3\150"+
    "\5\0\11\150\1\261\2\150\1\152\4\150\1\0\5\150"+
    "\2\0\4\150\5\0\10\150\1\262\1\0\2\150\1\152"+
    "\4\150\1\0\5\150\2\0\4\150\5\0\1\263\72\0"+
    "\1\264\41\0\1\265\21\0\1\261\40\0\1\266\26\0"+
    "\1\135\2\0\1\267\10\135\1\0\2\135\1\136\4\135"+
    "\1\0\15\135\4\0\1\270\35\0\1\135\2\0\1\135"+
    "\1\271\7\135\1\0\2\135\1\136\4\135\1\0\15\135"+
    "\3\0\1\272\42\0\1\273\43\0\1\274\36\0\1\275"+
    "\10\150\1\0\2\150\1\152\4\150\1\0\5\150\2\0"+
    "\4\150\5\0\1\150\1\276\7\150\1\0\2\150\1\152"+
    "\4\150\1\0\5\150\2\0\4\150\5\0\7\150\1\277"+
    "\1\150\1\0\2\150\1\152\4\150\1\0\5\150\2\0"+
    "\4\150\23\0\1\300\23\0\11\150\1\0\2\150\1\152"+
    "\1\150\1\301\2\150\1\0\5\150\2\0\4\150\10\0"+
    "\1\302\45\0\1\303\50\0\1\304\20\0\1\135\2\0"+
    "\5\135\1\305\3\135\1\0\2\135\1\136\4\135\1\0"+
    "\15\135\3\0\1\306\36\0\1\135\2\0\11\135\1\0"+
    "\2\135\1\136\2\135\1\307\1\135\1\0\15\135\10\0"+
    "\1\310\53\0\1\311\46\0\1\312\15\0\5\150\1\313"+
    "\3\150\1\0\2\150\1\152\4\150\1\0\5\150\2\0"+
    "\4\150\5\0\11\150\1\0\2\150\1\152\2\150\1\314"+
    "\1\150\1\0\5\150\2\0\4\150\5\0\11\150\1\0"+
    "\2\150\1\152\4\150\1\0\5\150\2\0\2\150\1\315"+
    "\1\150\24\0\1\316\22\0\11\150\1\0\2\150\1\152"+
    "\4\150\1\0\5\150\2\0\1\150\1\317\2\150\31\0"+
    "\1\320\50\0\1\321\40\0\1\322\4\0\1\135\2\0"+
    "\1\323\10\135\1\0\2\135\1\136\4\135\1\0\15\135"+
    "\15\0\1\324\24\0\1\135\2\0\11\135\1\0\2\135"+
    "\1\136\1\135\1\325\2\135\1\0\15\135\3\0\1\326"+
    "\57\0\1\327\50\0\1\330\14\0\1\331\10\150\1\0"+
    "\2\150\1\152\4\150\1\0\5\150\2\0\4\150\5\0"+
    "\11\150\1\0\2\150\1\152\1\150\1\332\2\150\1\0"+
    "\5\150\2\0\4\150\10\0\1\333\33\0\1\135\2\0"+
    "\6\135\1\334\2\135\1\0\2\135\1\136\4\135\1\0"+
    "\15\135\3\0\1\335\36\0\1\135\2\0\2\135\1\336"+
    "\6\135\1\0\2\135\1\136\4\135\1\0\15\135\11\0"+
    "\1\337\35\0\1\340\52\0\1\341\26\0\6\150\1\342"+
    "\2\150\1\0\2\150\1\152\4\150\1\0\5\150\2\0"+
    "\4\150\5\0\2\150\1\343\6\150\1\0\2\150\1\152"+
    "\4\150\1\0\5\150\2\0\4\150\2\0\1\135\2\0"+
    "\7\135\1\344\1\135\1\0\2\135\1\136\4\135\1\0"+
    "\15\135\16\0\1\345\23\0\1\135\2\0\11\135\1\346"+
    "\2\135\1\136\4\135\1\0\15\135\12\0\1\347\43\0"+
    "\1\346\34\0\1\350\35\0\7\150\1\351\1\150\1\0"+
    "\2\150\1\152\4\150\1\0\5\150\2\0\4\150\5\0"+
    "\11\150\1\346\2\150\1\152\4\150\1\0\5\150\2\0"+
    "\4\150\2\0\1\135\2\0\4\135\1\352\4\135\1\0"+
    "\2\135\1\136\4\135\1\0\15\135\3\0\1\353\42\0"+
    "\1\354\44\0\1\355\45\0\1\356\31\0\4\150\1\357"+
    "\4\150\1\0\2\150\1\152\4\150\1\0\5\150\2\0"+
    "\4\150\2\0\1\135\2\0\1\360\10\135\1\0\2\135"+
    "\1\136\4\135\1\0\15\135\13\0\1\361\31\0\1\362"+
    "\41\0\1\363\57\0\1\364\23\0\1\365\10\150\1\0"+
    "\2\150\1\152\4\150\1\0\5\150\2\0\4\150\2\0"+
    "\1\135\2\0\10\135\1\366\1\0\2\135\1\136\4\135"+
    "\1\0\15\135\6\0\1\367\50\0\1\370\37\0\1\371"+
    "\40\0\1\372\32\0\10\150\1\373\1\0\2\150\1\152"+
    "\4\150\1\0\5\150\2\0\4\150\2\0\1\135\2\0"+
    "\3\135\1\374\5\135\1\0\2\135\1\136\4\135\1\0"+
    "\15\135\17\0\1\375\25\0\1\376\44\0\1\377\62\0"+
    "\1\u0100\15\0\3\150\1\u0101\5\150\1\0\2\150\1\152"+
    "\4\150\1\0\5\150\2\0\4\150\2\0\1\135\2\0"+
    "\11\135\1\u0102\2\135\1\136\4\135\1\0\15\135\16\0"+
    "\1\u0103\37\0\1\u0102\32\0\1\u0104\37\0\11\150\1\u0102"+
    "\2\150\1\152\4\150\1\0\5\150\2\0\4\150\6\0"+
    "\1\u0105\40\0\1\u0106\52\0\1\u0107\30\0\1\u0108\51\0"+
    "\1\u0109\44\0\1\u010a\40\0\1\u010b\32\0\1\u010c\40\0"+
    "\1\u010d\37\0\1\u010e\55\0\1\u010f\33\0\1\u0110\46\0"+
    "\1\u0111\32\0\1\u0112\35\0\1\u0113\41\0\1\u0114\51\0"+
    "\1\u0115\41\0\1\u0116\34\0\1\u0117\41\0\1\u0118\52\0"+
    "\1\u0119\41\0\1\u011a\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8296];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\41\0\1\11\2\1\1\11\27\1\1\11\2\1\1\11"+
    "\16\1\1\11\3\1\1\11\3\1\4\11\1\1\1\11"+
    "\1\0\1\11\3\0\1\1\3\0\1\11\3\0\1\11"+
    "\2\0\1\1\1\0\3\11\7\0\1\11\16\0\1\11"+
    "\31\0\1\11\14\0\1\11\4\0\1\11\30\0\1\1"+
    "\1\0\1\1\3\11\10\0\1\11\41\0\1\11\21\0"+
    "\1\11\11\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer stringLiteral = new StringBuffer();
    int stateBeforeStringLiteral = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CobolLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 45: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 46: break;
          case 3: 
            { stateBeforeStringLiteral = yystate();
                                                              stringLiteral.setLength(0);
                                                              yybegin(STRING_LITERAL);
                                                              return CobolTypes.QUOTE;
            } 
            // fall through
          case 47: break;
          case 4: 
            { yybegin(WAIT_PIC); return CobolTypes.VARIABLE_NAME;
            } 
            // fall through
          case 48: break;
          case 5: 
            { yybegin(WAIT_PAREN_OPEN); return CobolTypes.BASE_TYPE;
            } 
            // fall through
          case 49: break;
          case 6: 
            { yybegin(VARIABLE_DECLARATION_WAIT_DOT); return CobolTypes.VALUE;
            } 
            // fall through
          case 50: break;
          case 7: 
            { yybegin(WS_SECTION); return CobolTypes.DOT;
            } 
            // fall through
          case 51: break;
          case 8: 
            { yybegin(PARAGRAPH); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 52: break;
          case 9: 
            { return CobolTypes.WORD;
            } 
            // fall through
          case 53: break;
          case 10: 
            { yybegin(PERFROM_WAIT_VARYING); return CobolTypes.PARAGRAPH_NAME;
            } 
            // fall through
          case 54: break;
          case 11: 
            { yybegin(PERFROM_WAIT_FROM); return CobolTypes.VARIABLE_NAME;
            } 
            // fall through
          case 55: break;
          case 12: 
            { yybegin(PERFROM_WAIT_BY); return CobolTypes.VALUE;
            } 
            // fall through
          case 56: break;
          case 13: 
            { yybegin(PERFROM_WAIT_UNTIL); return CobolTypes.VALUE;
            } 
            // fall through
          case 57: break;
          case 14: 
            { yybegin(WAIT_COMPARISON_SIGN); return CobolTypes.VALUE;
            } 
            // fall through
          case 58: break;
          case 15: 
            { yybegin(WAIT_COMPARISON_SECOND); return CobolTypes.COMPARISON_SIGN;
            } 
            // fall through
          case 59: break;
          case 16: 
            { yybegin(SENTENCE); return CobolTypes.VALUE;
            } 
            // fall through
          case 60: break;
          case 17: 
            { yybegin(PARAGRAPH); return CobolTypes.DOT;
            } 
            // fall through
          case 61: break;
          case 18: 
            { yybegin(SENTENCE); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 62: break;
          case 19: 
            { return CobolTypes.VALUE;
            } 
            // fall through
          case 63: break;
          case 20: 
            { return CobolTypes.ANY_CHARACTER;
            } 
            // fall through
          case 64: break;
          case 21: 
            { yybegin(stateBeforeStringLiteral);
                                                              return CobolTypes.QUOTE;
            } 
            // fall through
          case 65: break;
          case 22: 
            { yybegin(WAIT_TYPE_SIZE); return CobolTypes.PAREN_OPEN;
            } 
            // fall through
          case 66: break;
          case 23: 
            { yybegin(WAIT_VALUE_KEYWORD); return CobolTypes.PAREN_CLOSE;
            } 
            // fall through
          case 67: break;
          case 24: 
            { yybegin(WAIT_PAREN_CLOSE); return CobolTypes.TYPE_SIZE;
            } 
            // fall through
          case 68: break;
          case 25: 
            { yybegin(REQUIRE_DIVISION); return CobolTypes.LINE_NUMBER;
            } 
            // fall through
          case 69: break;
          case 26: 
            { yybegin(WAIT_IDENTIFICATION_VALUE); return CobolTypes.IDENTIFICATION_KEY;
            } 
            // fall through
          case 70: break;
          case 27: 
            { return CobolTypes.LINE_NUMBER;
            } 
            // fall through
          case 71: break;
          case 28: 
            { yybegin(PARAGRAPH); return CobolTypes.PARAGRAPH_NAME;
            } 
            // fall through
          case 72: break;
          case 29: 
            { yybegin(IDENTIFICATION_DIVISION); return CobolTypes.IDENTIFICATION_VALUE;
            } 
            // fall through
          case 73: break;
          case 30: 
            { yybegin(WAIT_VARIABLE_NUMBER); return CobolTypes.LINE_NUMBER;
            } 
            // fall through
          case 74: break;
          case 31: 
            { yybegin(WAIT_VARIABLE_NAME); return CobolTypes.VARIABLE_NUMBER;
            } 
            // fall through
          case 75: break;
          case 32: 
            { yybegin(PERFROM_WAIT_BY_VALUE); return CobolTypes.BY_KEYWORD;
            } 
            // fall through
          case 76: break;
          case 33: 
            { yybegin(WAIT_DATA_TYPE); return CobolTypes.PIC_KEYWORD;
            } 
            // fall through
          case 77: break;
          case 34: 
            { yybegin(PERFROM_WAIT_FROM_VALUE); return CobolTypes.FROM_KEYWORD;
            } 
            // fall through
          case 78: break;
          case 35: 
            { yybegin(WAIT_VALUE); return CobolTypes.VALUE_KEYWORD;
            } 
            // fall through
          case 79: break;
          case 36: 
            { yybegin(PERFROM_WAIT_UNTIL_VALUE); return CobolTypes.UNTIL_KEYWORD;
            } 
            // fall through
          case 80: break;
          case 37: 
            { yybegin(DISPLAY_WAIT); return CobolTypes.VERB_DISPLAY;
            } 
            // fall through
          case 81: break;
          case 38: 
            { yybegin(PERFROM_WAIT_PARAGRAPH); return CobolTypes.VERB_PERFROM;
            } 
            // fall through
          case 82: break;
          case 39: 
            { yybegin(PERFROM_WAIT_VARIABLE_TO_VARY); return CobolTypes.VARYING_KEYWORD;
            } 
            // fall through
          case 83: break;
          case 40: 
            { yybegin(SENTENCE); return CobolTypes.VERB_STOP_RUN;
            } 
            // fall through
          case 84: break;
          case 41: 
            { yybegin(DATA_DIVISION); return CobolTypes.DIVISION_TYPE_DATA;
            } 
            // fall through
          case 85: break;
          case 42: 
            { yybegin(PROCEDURE_DIVISION); return CobolTypes.DIVISION_TYPE_PROC;
            } 
            // fall through
          case 86: break;
          case 43: 
            { yybegin(IDENTIFICATION_DIVISION); return CobolTypes.DIVISION_TYPE_ID;
            } 
            // fall through
          case 87: break;
          case 44: 
            { yybegin(WS_SECTION); return CobolTypes.DATA_SECTION_WS;
            } 
            // fall through
          case 88: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
